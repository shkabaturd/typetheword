{"version":3,"sources":["components.cljs"],"mappings":";AAGA,4BAAA,5BAAMA,gEAAgBC;AAAtB,AACE,aAAA,mFAAA,MAAA,OAAA,QAAA,SAAA,1HAAMC;IACAC,QAAM,wDAAA,xDAACC,mDAAqBH;AADlC,AAEE,OAACI,8CAAMC,cAAI,iBAAAC,qBAAA,kDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA+8EoC,AAAA+B,sBAAApC;IA/8EpCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SACE,CAAA,8FAAA,oDAAA,hFAA2B,AAACa,mBAAS3B,0DAChC0B;;AAFP,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,wCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,OAAAF,uLAAA,AAAAH,wCAAA,AAAAI,eAAAnB,/NACE,CAAA,8FAAA,oDAAA,hFAA2B,AAACqB,mBAAS3B,0DAChC0B;;;AAFP;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAQJ;;;AAKvB,qBAAA,rBAAM2B;AAAN,AAAA,0FAAA,mDAAA,2CAAA,4EAAA,KAAA,wDAAA;;AAIA,wBAAA,xBAAMC,wDAAYC,EAAEC;AAApB,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,yBAAA,mFAAA,mDAAA,2CAAA,wDAAA,cAAA,mFAAA,mDAAA,2CAAA,wDAAA,6BAAA,mFAAA,mDAAA,2CAAA,wDAAA,nPAG8BD,sQACAC;;AAE9B,oBAAA,mFAAA,OAAA,MAAA,QAAA,SAAA,rIAAKC;AAEL,wBAAA,xBAAMC,wDAAYC,MAAMC;AAAxB,AACE,IAAMpC,OAAK,+CAAA,AAAAqC,4BAAA,3EAACC,+DAAQH,OAAMC;IACpBpC,WAAK,AAACD,0BAAeC;AAD3B,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,eAAA,mFAAA,mDAAA,2CAAA,4EAAA,KAAA,uDAAA,QAAA,wDAAA,eAAA,oDAAA,IAAA,sDAAA,KAAA,2FAAA,2CAAA,yEAAA,jBAMgDA,8EAExB,WAAKuC;AAAL,AACQ,yGAAA,AAAAF,zGAACG,yHAASL;;AACV,OAACM,mDAAMN,MAAMO,mBAASN,KACf,AAAA,AAAIG;;;AAK7C","names":["components/colorize-words","text","colors","words","clojure.string.split","cljs.core.apply","cljs.core/str","iter__5480__auto__","s__12880","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__12882","cljs.core/chunk-buffer","i__12881","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12879","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","w","cljs.core/rand-nth","components/s-input","components/container2","a","b","components/colors","components/input-text","state","path","cljs.core/deref","cljs.core.get_in","event","cljs.core.println","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core/chunk-first"],"sourcesContent":["(ns components\r\n  (:require [clojure.string :as str]))\r\n\r\n(defn colorize-words [text]\r\n  (let [colors [\"red\" \"blue\" \"green\" \"purple\" \"orange\"]\r\n        words (clojure.string/split text #\" \")]\r\n    (apply str (for [w words]\r\n                 (str \"<span style='color:\" (rand-nth colors) \"'>\"\r\n                      w\r\n                      \"</span> \")))))\r\n\r\n(defn s-input []\r\n  [:div {:content-editable true\r\n         :class \"form-control mb-3\"}])\r\n\r\n(defn container2 [a b]\r\n  [:div {:class \"container mt-5\"}\r\n   [:div {:class \"row\"} \r\n    [:div {:class \"col-md-6\"} a]\r\n    [:div {:class \"col-md-6\"} b]]])\r\n\r\n(def colors [\"blue\" \"red\" \"green\" \"yellow\" \"ginger\"])\r\n\r\n(defn input-text [state path] \r\n  (let [text (get-in @state path \"nothing to show\")\r\n        text (colorize-words text)]\r\n        [:div {:class \"mb-3\"}\r\n         [:div {:content-editable true\r\n                :color \"green\"\r\n                :class \"form-control\" :rows \"3\" :cols \"30\" \r\n                :dangerouslySetInnerHTML {:__html text}\r\n                \r\n                :on-input (fn [event] \r\n                                  (println @state)\r\n                                  (swap! state assoc-in path\r\n                                         (-> event .-target .-innerText)))}]\r\n         ]\r\n    )\r\n  )\r\n\r\n(comment \r\n \r\n  )"]}